-----------------------------------------------------------------------------------
-------------------------------BASICS OF JAVASCRIPT--------------------------------
-----------------------------------------------------------------------------------

//Adjusting Development Environment for Javascript Development
//Where to Place Javascript Code 
	//Head
	<script></script>
	<script src=""></script>
	//Body
	<script></script>
//Defining Variables,Functions and Scope
  //Variables Definitions
	var message = "hi";
	//always starts with 'var' 
  *No types are declared 
  *Js is dynamically typed language
  *Same variable can hold different types during the life of the execution 
  //Functions Definitions
	function a () {
	  ...
	} 
	----------------------------------------------------
	var a = function () {...}
	//a : value of function assigned, NOT the returned result!
	//function : no name defined 

	a(); //Function Execution or Function Invocation
	----------------------------------------------------
	funtion compare (x, y) {
	  return x > y; //followed by value,use 'return'
	}
	----------------------------------------------------
	function compare (x, y) {...}
	var a = compare (4, 5);
	compare (4, "a");
	compare();
  *All arguments defined in a Javascript function are optional.
  
  //Scope Definitions 
    --Global
    --Function(aka lexical)

  *(Lexical means that it depends on where something is physically defined.)
  *There is no block scope in Javascript.

  **Global
    -Variables and functions defined here are available eveywhere.

  **Function(aka lexical)
    -Variables and functions defined here are available only within this function.
  	
  //Scope Chain Definitions 
  *Everything is executed in a Execution Context.
  *Function invocation creates a new Execution Context.
  *Each Exacution Context has:
   -Its own Variable Environment 
   -Special 'this' object
   -Reference to its Outer Environment
  *Global scope does not have an Outer Environment as it's the most outer there is.
 ?How scope chain works?
 -Referenced(not defined) variable will be searched for in its current scope first. 
 If not found, the Outer Reference will be searched. 
 If not found, the Outer Reference's Outer Reference will be searched,etc. 
 This will keep going until the Global scope.
 If not found in Global scope, the variable is undefined.

------------------------------------------------------------
/*Sample*/

//Global scope
var num = 2;
A();
//Function A
var num = 5;
B();
//Function B
console.log(x);
//result will be x=2. B is defined within Global scope.
------------------------------------------------------------

  *Defining variables - dynamically typed
  *Defining functions - creates its own scope(lexical)
  *Js code runs within a Execution Context
  *Scope chain is used to retrieve varibles from Outer Variable Environments 

-----------------------------------------------------------------------------------
----------------------JS TYPES AND COMMON LANGUAGE CONSTRUCTS----------------------
-----------------------------------------------------------------------------------

//Javascript Types 
  //Types
  *A type is a particular data structure.
    *Each language defines some built-in types.(Yerleşik türler)
    *Built-in types can be used to build other data structures
    *Js has 7 built-in types: 6 primitive and 1 object type 

    //Object Type
      *Object is a collection of name/value pairs(pair : çift)
------------------------------------------------------------
/*Sample*/

firstName: "Ayse";
lastName: "Goktas";
social: {
	  linkedin : "aysegoktas15",
	  twitter : "aysegoktas15",
	  facebook : "aysegoktas15"
	}
// name : {value}
//object type can be a nested type!
------------------------------------------------------------
	
    //Primitive Types(İlkel tip)
      *Primitive type represents a single, immutable value.(immutable : değişmez)
      *Single value, i.e., Not an object!
      *Immutable means once it is set, it cannot be chnaged.
        *Value becomes read-only.
        *You can create another value based on an existing one(but the memory space that was allocated for the first value is not changed. Instead, you can create a new memory space for the new value.) 

	  //Boolean 
	  *Booleand can only have 2 values: true or false

	  //Undefined
	  *Undefined signifies that no value has ever been set	
	  *The variable in memory when it defined but has never been assigned any value yet.
	  *Can only have one value : undefined
	  *You can set a variable to undefined but you should NEVER do it. Its meaning is that it is never been defined, so defining it to undefined is counter to its core meaning  

	  //Null
	  *Null signifies lack of value.
	  *As opposed to undefined, which is lack of definition.
	  *Can only have one value : null (reserved keyword)
	  *It is okay to explicitly set a variable to null.

	  //Number
	  *Number is the only numeric type in Javascprit.
	  *Always represented under the hood as double-precision 64-bit floating point.
	  *Js does not have an integer type !
	  *Integers are a subset of doubles instead of separate data type.(subset : alt küme )

	  //String 
	  *String is sequence of characters used to represent text.(sequence : sıra, dizi)
	  *Use either single or double quotes, i.e., 'text', or "text"

	  //Symbol????
	
	//resume
	  --Js defines 7 built-in types : Object and 6 Primitives
	  --Object type is a collection of name/value pairs
	  --Primitive type can contain a single, immutable value(immutable : değişmez)
	  --Undefined means variable memory has been allocated but no value has ever been explicitly set yet.(allocated : tahsis edilmiş, explicitly : açıkça)

//Common Language Constructs
  ////String Concatenation (Dize Birleştirme)( += Operator)
	var string = "Hello";
	string += " World"; 
	console.log(string + "!");
	--> Hello world!
  ----------------------------------------------------------
  ////Regular Math Operators ( +, -, *, /)
	console.log((5+4)/3);
	--> 3 
	------------------
	console.log(undefined/3);
	--> NaN (A special symbol)(Not a Number)
  ----------------------------------------------------------
  ////Equality( == )
	console.log((5+4)/3);
	--> 3 
	console.log(undefined/3);
	--> NaN (A special symbol)(Not a Number)
	------------------
	var x = 4, y = 4;
	if (x == y) {
	    console.log("x = y");
	    }
	--> x = y

	x = "4";
	if (x == y) {
	    console.log("x = y");
	    }
	--> x = y 
	//When the Js tries to evaluate this equality, it converts one of the types to be the same type as the other variable and only then compares the values.
  ----------------------------------------------------------
  ////Strict Equality( === )
	var y = 4;
	var x = "4";
	if (x === y) {
	    console.log("x = y");
	    }
	else {
	    console.log("x != y");
	    }
	--> x != y 
	//First it will compare their types. If it is not the same type, it is not going to compare them anymore.
  ----------------------------------------------------------
  ////If Statements ( All False )
	if ( false || null || undefined || "" || 0 || NaN) {
	    console.log("This line will not ever execute.");
	else {
	    console.log(" All false ");
	    }
  ----------------------------------------------------------
  ////If Statements ( All True )
	if ( true & "hello" & 1 & -1 & "false" ) {
	    console.log("This line will not ever execute.");
	else {
	    console.log(" All true ");
	    }
  ----------------------------------------------------------
  ////For Loop
	var sum = 0;
	for (var i = 0; i < 10; i++ ) {
	  console.log(i);
	  sum += i;
	  }
	console.log("sum: " + sum);
------------------------------------------------------------


//Handling Default Values 

  function orderChickenWith(sideDish) {
    sideDish = sideDish || "whatever";
    console.log("Chicken with " + sideDish);
    }
  orderChickenWith("noodles");
  orderChickenWith(); 

  -->Chicken with noodles
  -->Chicken with whatever!

-----------------------------------------------------------------------------------
------------------------OBJECTS AND FUNCTIONS IN JAVASCRIPT------------------------
-----------------------------------------------------------------------------------



















































